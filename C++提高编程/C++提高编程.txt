 C++提高编程
 
        本阶段主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层次的使用

1、模板

   1.1 模板的概念

         模板就是建立通用的磨具，大大他提高复用性

         特点：模板不可以直接使用，他只是一个框架

                    模板的通用并不是万能的

  1.2函数模板

         C++另一种编程思想称为泛型编程，主要利用的技术就是模板

         C++提供两种模板机制：函数模板 和 类模板

  1.2.1函数模板语法
 
          函数模板作用：

           建立一个通用函数，其函数返回值类型和形参类型可以不具体指定，用一个
           虚拟的类型 来表示。

          语法 ：template<typename  T>  //函数声明或定义

           解释： template --- 声明创建模板

                     typename ---- 表面其后面的符号是一种数据类型，可以用 class 代替

                     T ---- 通用的数据类型，名称也可以替代，通常为大写字母
 
  1.2.2 函数模板注意事项
 
            自动类型推导，必须推导出一致的数据类型T ，才可以使用

            模板必须要确定出T的数据类型，才可以使用

  1.2.3 普通函数与函数模板的区别

           1.普通函数调用时可以发生自动类型转换（隐式类型转换）

           2.函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换

           3.如果利用显示指定函数类型的方式，可以发生隐试类型转换
        
  1.2.4 普通函数与函数模板的调用规则

            1.如果函数模板和普通函数都可以实现，优先调用普通函数

            2.可以通过空模板参数列表来强调调用函数模板

            3.函数模板也可以发生重载

            4.如果函数模板可以产生更好的匹配，优先调用函数模板

  1.2.5 模板的局限性
          
             模板的通用性并不是万能的

             因此C++为了解决这种问题，提供模板的重载，可以为这些特定的类型提供
             具体化的模型
          