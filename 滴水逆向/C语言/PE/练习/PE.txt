1、 DOC头：     62字节
WORD	e_ magic ;    	// 54 4D     * MZ 判断是否为可执行文件
WORD	e_ cblp;			
WORD	e_ _cp;		
WORD	e_ crlc;		
WORD	e_ cparhdr ;	
WORD	e_ minalloc;	
WORD	e_ maxalloc ;	
WORD	e_ _sp;		
WORD	e_ csum;		
WORD	e_ ip;		
WORD	e_ cs;		
WORD	e_ lfarlc;		
WORD	e_ ovno ;		
WORD	e_ res [4] ;	
WORD	e_ oemid ;	
WORD	e_ oeminfo;	
WORD	e_ res2[10] ;	
DWORD	e_ lfanew;		 * PE头对于文件的偏移 定位PE文件用    

2、标准PE头      20字节
PE标志				
WORD	Machine ; 		 运行平台 *
WORD	NumberOfSections ;	 节的总数
DWORD	TimeDateStamp ;		 时间戳：文件创建时间
DWORD	PointerToSymbolTable;	
DWORD	NumberOfSymbols ;	
WORD	SizeOfOptionalHeader ;	可选PE头大小* 32位 E0h；64位F0h
WORD	Characteristics;                   	每个位有不同的含义，可执行文件值10F 即0 1 2 3 8 位置 1

3、可选PE头     
WORD Magic;			说明文件类型：10B 32位下PE文件； 20B 64位下
BYTE MajorLinkerVersion;		
BYTE Minorl .inkerVersion;		
DWORD SizeOfCode;		 所有代码节的和，必须是FileAlignment的整数倍 编译器填的  没用
DWORD SizeOflnitializedData;		 已初始化数据大小的和，FileAlignment的整数倍 编译器填的  没用
DWORD SizeOfUninitializedData;	 未初始化数据大小的和，与上述一致
DWORD AddressOfEntryPoint;	 程序入口
DWORD BaseOfCode;		 代码开始的基址
DWORD BaseOfData;		 数据开始的基址
DWORD ImageBase;		 内存镜像的基址       *
DWORD SectionAlignment;		  内存对齐  老：200   新：1000
DWORD FileAlignment;		 数据对齐    默认 1000
WORD MajorOperatingSystemVersion;   
WORD MinorOperatingSystemVersion;	
WORD MajorlmageVersion;		
WORD MinorlmageVersion;		
WORD MajorSubsystemVersion;	
WORD MinorSubsystemVersion;	
DWORD Win32VersionValue;		
DWORD SizeOflmage;		  内存中整个PE文件额映射的尺寸，可以比实际的值大SectionAlignment的整数倍
DWORD SizeOfHeaders;		  所有头+节表按照文件对齐后的大小，否则加载会出错
DWORD CheckSum;			  效验和，一些系统文件有要求，用来判断文件是否被修改
WORD Subsystem;			
WORD DIICharacteristics;		
DWORD SizeOfStackReserve;		初始化时保留的堆栈大小
DWORD SizeOfStackCommit;		初始化时实际提交的大小
DWORD SizeOfHeapReserve;		初始化时保留的堆大小
DWORD SizeOfHeapCommit;		初始化时实际提交的大小
DWORD LoaderFlags;		   
DWORD NumberOfRvaAndSizes;	目录项目数
_IMAGE_ DATA_ DIRECTORY DataDirectory[16];      


4、节表
1、 Name  8字节  一般情况下以“\0”结尾的ASCII码字符串来表示的名称，内容可以自定义
 注意：该名称并不遵守必须以“\0”结尾的规律，如果不以“\0”结尾，系统会截取8字节的长度进行处理

2、Misc 双字 		 是该节在没有对齐的真实尺寸，该值可以不准确、

3、VirtualAddress 		节区在内存中的偏移地址。加上ImageBase才是在内存中的真正地址.

4、SizeOfRawData  		节在文件中对齐后的尺寸.

5、PointerToRawData 	节区在文件中的偏移.

6、PointerToRelocations 	在obj文件中使用 对exe无意义						
						
7、PointerToLinenumbers 	行号表的位置 调试的时候使用						
						
8、NumberOfRelocations 	在obj文件中使用  对exe无意义						
						
9、NumberOfLinenumbers 	行号表中行号的数量 调试的时候使用						
						
10、Characteristics 		节的属性						
				


5、导出表
typedef struct _IMAGE_EXPORT_DIRECTORY {							
    DWORD   Characteristics;				// 未使用			
    DWORD   TimeDateStamp;				// 时间戳			
    WORD    MajorVersion;				// 未使用			
    WORD    MinorVersion;				// 未使用			
    DWORD   Name;				// 指向该导出表文件名字符串			
    DWORD   Base;				// 导出函数起始序号			
    DWORD   NumberOfFunctions;		// 所有导出函数的个数			
    DWORD   NumberOfNames;		// 以函数名字导出的函数个数			
    DWORD   AddressOfFunctions;    		 // 导出函数地址表RVA							
    DWORD   AddressOfNames;        		 // 导出函数名称表RVA							
    DWORD   AddressOfNameOrdinals;  		 // 导出函数序号表RVA							
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;							
							















































